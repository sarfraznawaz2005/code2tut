const { CombineTutorialNode } = require('../lib/nodes');
const createTutorialFlow = require('../lib/flow');

describe('createTutorialFlow', () => {
   test('creates flow with correct nodes and connections', () => {
     const flow = createTutorialFlow();

     expect(flow).toBeDefined();
     expect(flow.run).toBeDefined(); // Flow has run method
     // Additional checks can be added based on Flow implementation
   });
});

describe('CombineTutorialNode', () => {
  let node;
  let mockShared;

  beforeEach(() => {
    node = new CombineTutorialNode();
    mockShared = {
      projectName: 'TestProject',
      outputDir: 'output',
      relationships: {
        summary: 'This is a test project summary.',
        details: [
          { from: 0, to: 1, label: 'uses' },
          { from: 1, to: 2, label: 'manages' }
        ]
      },
      chapterOrder: [0, 1, 2],
      abstractions: [
        { name: 'Abstraction1', description: 'Desc1', files: [0] },
        { name: 'Abstraction2', description: 'Desc2', files: [1] },
        { name: 'Abstraction3', description: 'Desc3', files: [2] }
      ],
      chapters: ['Chapter 1 content', 'Chapter 2 content', 'Chapter 3 content']
    };
  });

  test('should generate Mermaid diagram correctly', async () => {
    const prepRes = await node.prep(mockShared);

    expect(prepRes.indexContent).toContain('```mermaid');
    expect(prepRes.indexContent).toContain('flowchart TD');
    expect(prepRes.indexContent).toContain('A0["Abstraction1"]');
    expect(prepRes.indexContent).toContain('A1["Abstraction2"]');
    expect(prepRes.indexContent).toContain('A2["Abstraction3"]');
    expect(prepRes.indexContent).toContain('A0 -- "uses" --> A1');
    expect(prepRes.indexContent).toContain('A1 -- "manages" --> A2');
  });

  test('should include project summary in index', async () => {
    const prepRes = await node.prep(mockShared);

    expect(prepRes.indexContent).toContain('This is a test project summary.');
  });

  test('should generate chapter links', async () => {
    const prepRes = await node.prep(mockShared);

    expect(prepRes.indexContent).toContain('1. [Abstraction1]');
    expect(prepRes.indexContent).toContain('2. [Abstraction2]');
    expect(prepRes.indexContent).toContain('3. [Abstraction3]');
  });

  test('should create chapter files with correct content', async () => {
    const prepRes = await node.prep(mockShared);

    expect(prepRes.chapterFiles).toHaveLength(3);
    expect(prepRes.chapterFiles[0].filename).toMatch(/01_abstraction1\.md/);
    expect(prepRes.chapterFiles[0].content).toContain('Chapter 1 content');
     expect(prepRes.chapterFiles[0].content).toContain('Generated by [Code2Tutorial](https://github.com/sarfraznawaz2005/code2tut)');
  });
});